---

  - name: Check if psipred installed
    stat: "path={{ psipred_dir }}"
    register: psipred_exist

  - name : Check Out PSIPRED from GIT
    when: psipred_exist.stat.exists == False
    git:
      repo: https://github.com/psipred/psipred.git
      dest: "{{ psipred_dir }}"
      clone: yes
      force: yes

  - name: change psipred db
    when: psipred_exist.stat.exists == False
    replace:
      dest: "{{ download_path }}/psipred/BLAST+/runpsipredplus"
      replace: 'set dbname = uniref90.fasta'
      regexp: '^set\sdbname\s=\suniref90filt'

  - name: change psipred blastdb
    when: psipred_exist.stat.exists == False
    replace:
      dest: "{{ download_path }}/psipred/BLAST+/runpsipredplus"
      replace: 'set ncbidir = {{ blast_dir }}/bin'
      regexp: '^set\sncbidir\s=\s/usr/local/bin'

  - name: change psipred psipred bin
    when: psipred_exist.stat.exists == False
    replace:
      dest: "{{ download_path }}/psipred/BLAST+/runpsipredplus"
      replace: 'set execdir = {{ psipred_dir }}/bin'
      regexp: '^set\sexecdir\s=\s../bin'

  - name: change psipred psipred data
    when: psipred_exist.stat.exists == False
    replace:
      dest: "{{ download_path }}/psipred/BLAST+/runpsipredplus"
      replace: 'set datadir = {{ psipred_dir }}/data'
      regexp: '^set\sdatadir\s=\s../data'

  - name: Check if BLAST+ installed
    stat: path={{ blast_dir }}
    register: blast_exist

  - name: get BLAST+
    when: blast_exist.stat.exists == False
    get_url:
      url: "ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/{{ blastversion }}/ncbi-blast-{{ blastversion }}+-x64-linux.tar.gz"
      dest: "{{ download_path }}"
      timeout: 120
    register: get_url_result

  - name: unarchive blast+
    when: blast_exist.stat.exists == False
    unarchive:
      src: "{{ download_path }}/ncbi-blast-{{ blastversion }}+-x64-linux.tar.gz"
      dest: "{{ download_path }}"
      remote_src: yes

  - name: Check if HHSuite installed
    stat: path={{ hhsuite_dir }}
    register: hhsuite_exist

  - name: get HHBlits
    when: hhsuite_exist.stat.exists == False
    get_url:
      url: http://wwwuser.gwdg.de/~compbiol/data/hhsuite/releases/hhsuite-latest-linux-x86_64.tar.gz
      dest: "{{ download_path }}"
      timeout: 120
    register: get_url_result

  - name: unarchive hhblits
    when: blast_exist.stat.exists == False
    unarchive:
      src: "{{ download_path }}/hhsuite-latest-linux-x86_64.tar.gz"
      dest: "{{ download_path }}"
      remote_src: yes

  - name: Check if uniref90 available
    stat: path={{ uniref90_dir }}
    register: uniref90_exist

  - name: make uniref90 dir
    file:
      path: "{{ uniref90_dir }}"
      state: directory

  - name: Get uniref90
    shell: "wget --timeout 120 ftp://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref90/uniref90.fasta.gz -O {{ uniref90_dir }}/uniref90.fasta.gz"
    register: get_url_result
    until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
    retries: 10
    delay: 10
    when: uniref90_exist.stat.exists == False

  - name: unzip uniref90
    shell: cd {{ uniref90_dir }}; gunzip uniref90.fasta.gz
    when: uniref90_exist.stat.exists == False

  - name: Run formatdb
    shell: "cd {{ uniref90_dir }}; {{ blast_dir }}/bin/makeblastdb -in uniref90.fasta -dbtype prot"
    when: uniref90_exist.stat.exists == False

  - name: Check if hhdb available
    stat: path={{ hhdb_dir }}
    register: hhdb_exist

  - name: make hhdb dir
    when: hhdb_exist.stat.exists == False
    file:
      path: "{{ hhdb_dir }}"
      state: directory

  - name: Get HHsuite db
    shell: "wget --timeout 120 http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/{{ hhdb }} -O {{ hhdb_dir }}/{{ hhdb }}"
    register: get_url_result
    until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
    retries: 10
    delay: 10
    when: hhdb_exist.stat.exists == False

  - name: unzip uniref20
    shell: "cd {{ hhdb_dir }}; tar -zxvf {{ hhdb }}"
    when: hhdb_exist.stat.exists == False

  - name: Get HHsuite pdb db
    shell: "wget --timeout 120 http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/{{ hhpdb }} -O {{ hhdb_dir }}/{{ hhpdb }}"
    register: get_url_result
    until: get_url_result.stdout.find("Unable to establish SSL connection") == -1
    retries: 10
    delay: 10
    when: hhdb_exist.stat.exists == False

  - name: make hhdb dir
    when: hhdb_exist.stat.exists == False
    file:
      path: "{{ hhdb_dir }}/pdb"
      state: directory

  - name: untar pdb70
    shell: "cd {{ hhdb_dir }}; tar -zxvf {{ hhpdb }} -C pdb/"
    when: hhdb_exist.stat.exists == False

  - name: Check if pfclust is installed
    stat: path={{ pfclust_dir }}
    register: pfclust_exist

  - name: get pfclust
    when: pfclust_exist.stat.exists == False
    get_url:
      url: "http://chemistry.st-andrews.ac.uk/staff/jbom/group/PFClust.zip"
      dest: "{{ download_path }}"
      timeout: 120
    register: get_url_result

  - name: unarchive pfclust
    when: pfclust_exist.stat.exists == False
    unarchive:
      src: "{{ download_path }}/PFClust.zip"
      dest: "{{ download_path }}"
      remote_src: yes

  - name: Check if dynamine is installed
    stat: path={{ dynamine_dir }}
    register: dynamine_exist

  - name: get dynamine
    when: dynamine_exist.stat.exists == False
    get_url:
      url: "http://dynamine.ibsquare.be/www/dynamine.tgz"
      dest: "{{ download_path }}"
      timeout: 120
    register: get_url_result

  - name: unarchive dynamine
    when: dynamine_exist.stat.exists == False
    unarchive:
      src: "{{ download_path }}/dynamine.tgz"
      dest: "{{ download_path }}"
      remote_src: yes

  - name: change dynamine API Key
    when: dynamine_exist.stat.exists == False
    replace:
      dest: "{{ dynamine_dir }}/config.txt"
      replace: "json_api_key = '{{ dynamine_api_key }}'"
      regexp: "^json_api_key = 'your personal API key'"
